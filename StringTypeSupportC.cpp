// -*- C++ -*-
/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.5.18
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       https://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     https://www.dre.vanderbilt.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// /tmp/OpenDDS/ACE_TAO/TAO/TAO_IDL/be/be_codegen.cpp:372


#include "StringTypeSupportC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "StringTypeSupportC.inl"
#endif /* !defined INLINE */
// TAO_IDL - Generated from
// /tmp/OpenDDS/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for std_msgs::msg::dds_::String_TypeSupport.

std_msgs::msg::dds_::String_TypeSupport_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_TypeSupport>::duplicate (
    std_msgs::msg::dds_::String_TypeSupport_ptr p)
{
  return std_msgs::msg::dds_::String_TypeSupport::_duplicate (p);
}

void
TAO::Objref_Traits<std_msgs::msg::dds_::String_TypeSupport>::release (
    std_msgs::msg::dds_::String_TypeSupport_ptr p)
{
  ::CORBA::release (p);
}

std_msgs::msg::dds_::String_TypeSupport_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_TypeSupport>::nil (void)
{
  return std_msgs::msg::dds_::String_TypeSupport::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<std_msgs::msg::dds_::String_TypeSupport>::marshal (
    const std_msgs::msg::dds_::String_TypeSupport_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



std_msgs::msg::dds_::String_TypeSupport::String_TypeSupport (void)
{}

std_msgs::msg::dds_::String_TypeSupport::~String_TypeSupport (void)
{
}

std_msgs::msg::dds_::String_TypeSupport_ptr
std_msgs::msg::dds_::String_TypeSupport::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_TypeSupport::_duplicate (
      dynamic_cast<String_TypeSupport_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_TypeSupport_ptr
std_msgs::msg::dds_::String_TypeSupport::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_TypeSupport::_duplicate (
      dynamic_cast<String_TypeSupport_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_TypeSupport_ptr
std_msgs::msg::dds_::String_TypeSupport::_nil (void)
{
  return 0;
}

std_msgs::msg::dds_::String_TypeSupport_ptr
std_msgs::msg::dds_::String_TypeSupport::_duplicate (String_TypeSupport_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
std_msgs::msg::dds_::String_TypeSupport::_tao_release (String_TypeSupport_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
std_msgs::msg::dds_::String_TypeSupport::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:std_msgs/msg/dds_/String_TypeSupport:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* std_msgs::msg::dds_::String_TypeSupport::_interface_repository_id (void) const
{
  return "IDL:std_msgs/msg/dds_/String_TypeSupport:1.0";
}

::CORBA::Boolean
std_msgs::msg::dds_::String_TypeSupport::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /tmp/OpenDDS/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for std_msgs::msg::dds_::String_DataWriter.

std_msgs::msg::dds_::String_DataWriter_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataWriter>::duplicate (
    std_msgs::msg::dds_::String_DataWriter_ptr p)
{
  return std_msgs::msg::dds_::String_DataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataWriter>::release (
    std_msgs::msg::dds_::String_DataWriter_ptr p)
{
  ::CORBA::release (p);
}

std_msgs::msg::dds_::String_DataWriter_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataWriter>::nil (void)
{
  return std_msgs::msg::dds_::String_DataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataWriter>::marshal (
    const std_msgs::msg::dds_::String_DataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



std_msgs::msg::dds_::String_DataWriter::String_DataWriter (void)
{}

std_msgs::msg::dds_::String_DataWriter::~String_DataWriter (void)
{
}

std_msgs::msg::dds_::String_DataWriter_ptr
std_msgs::msg::dds_::String_DataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_DataWriter::_duplicate (
      dynamic_cast<String_DataWriter_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_DataWriter_ptr
std_msgs::msg::dds_::String_DataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_DataWriter::_duplicate (
      dynamic_cast<String_DataWriter_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_DataWriter_ptr
std_msgs::msg::dds_::String_DataWriter::_nil (void)
{
  return 0;
}

std_msgs::msg::dds_::String_DataWriter_ptr
std_msgs::msg::dds_::String_DataWriter::_duplicate (String_DataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
std_msgs::msg::dds_::String_DataWriter::_tao_release (String_DataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
std_msgs::msg::dds_::String_DataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:std_msgs/msg/dds_/String_DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* std_msgs::msg::dds_::String_DataWriter::_interface_repository_id (void) const
{
  return "IDL:std_msgs/msg/dds_/String_DataWriter:1.0";
}

::CORBA::Boolean
std_msgs::msg::dds_::String_DataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}
// TAO_IDL - Generated from
// /tmp/OpenDDS/ACE_TAO/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:47


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations for std_msgs::msg::dds_::String_DataReader.

std_msgs::msg::dds_::String_DataReader_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataReader>::duplicate (
    std_msgs::msg::dds_::String_DataReader_ptr p)
{
  return std_msgs::msg::dds_::String_DataReader::_duplicate (p);
}

void
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataReader>::release (
    std_msgs::msg::dds_::String_DataReader_ptr p)
{
  ::CORBA::release (p);
}

std_msgs::msg::dds_::String_DataReader_ptr
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataReader>::nil (void)
{
  return std_msgs::msg::dds_::String_DataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<std_msgs::msg::dds_::String_DataReader>::marshal (
    const std_msgs::msg::dds_::String_DataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

TAO_END_VERSIONED_NAMESPACE_DECL



std_msgs::msg::dds_::String_DataReader::String_DataReader (void)
{}

std_msgs::msg::dds_::String_DataReader::~String_DataReader (void)
{
}

std_msgs::msg::dds_::String_DataReader_ptr
std_msgs::msg::dds_::String_DataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_DataReader::_duplicate (
      dynamic_cast<String_DataReader_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_DataReader_ptr
std_msgs::msg::dds_::String_DataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return String_DataReader::_duplicate (
      dynamic_cast<String_DataReader_ptr> (_tao_objref));
}

std_msgs::msg::dds_::String_DataReader_ptr
std_msgs::msg::dds_::String_DataReader::_nil (void)
{
  return 0;
}

std_msgs::msg::dds_::String_DataReader_ptr
std_msgs::msg::dds_::String_DataReader::_duplicate (String_DataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
std_msgs::msg::dds_::String_DataReader::_tao_release (String_DataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
std_msgs::msg::dds_::String_DataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:std_msgs/msg/dds_/String_DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* std_msgs::msg::dds_::String_DataReader::_interface_repository_id (void) const
{
  return "IDL:std_msgs/msg/dds_/String_DataReader:1.0";
}

::CORBA::Boolean
std_msgs::msg::dds_::String_DataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

