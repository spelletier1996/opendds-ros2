/* -*- C++ -*- */
/* Generated by opendds_idl version 3.21.0 (ACE version 6.5.18) running on input file ../tests/ROS2/String.idl */
#ifndef OPENDDS_IDL_GENERATED_STRINGTYPESUPPORTIMPL_H_CELRIJ
#define OPENDDS_IDL_GENERATED_STRINGTYPESUPPORTIMPL_H_CELRIJ

#include <dds/Version.h>
#if !OPENDDS_VERSION_EXACTLY(3, 21, 0)
#  error "This file should be regenerated with opendds_idl"
#endif
#include <dds/DCPS/Definitions.h>

#include <dds/DdsDcpsC.h>

#include "StringC.h"
#include "StringTypeSupportC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/Service_Participant.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DCPS/Util.h"
#include "dds/DCPS/ValueReader.h"
#include "dds/DCPS/ValueWriter.h"
#include "dds/DCPS/XTypes/TypeObject.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */


/* End MODULE: OpenDDS */


/* Begin MODULE: std_msgs */



/* Begin MODULE: msg */



/* Begin MODULE: dds_ */



/* Begin STRUCT: String_ */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

struct std_msgs_msg_dds__String__xtag {};
template<> const XTypes::TypeIdentifier& getMinimalTypeIdentifier<std_msgs_msg_dds__String__xtag>();

template<> const XTypes::TypeMap& getMinimalTypeMap<std_msgs_msg_dds__String__xtag>();

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

bool vread(OpenDDS::DCPS::ValueReader& value_reader,  ::std_msgs::msg::dds_::String_& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void vwrite(OpenDDS::DCPS::ValueWriter& value_writer, const  ::std_msgs::msg::dds_::String_& value);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<> void set_default( ::std_msgs::msg::dds_::String_& stru);

void serialized_size(const Encoding& encoding, size_t& size, const  ::std_msgs::msg::dds_::String_& stru);

bool operator<<(Serializer& strm, const  ::std_msgs::msg::dds_::String_& stru);

bool operator>>(Serializer& strm,  ::std_msgs::msg::dds_::String_& stru);

void serialized_size(const Encoding& encoding, size_t& size, const NestedKeyOnly<const  ::std_msgs::msg::dds_::String_>& stru);

bool operator<<(Serializer& strm, const NestedKeyOnly<const  ::std_msgs::msg::dds_::String_>& stru);

bool operator>>(Serializer& strm, const NestedKeyOnly< ::std_msgs::msg::dds_::String_>& stru);

void serialized_size(const Encoding& encoding, size_t& size, const KeyOnly<const  ::std_msgs::msg::dds_::String_>& stru);

bool operator<<(Serializer& strm, const KeyOnly<const  ::std_msgs::msg::dds_::String_>& stru);

bool operator>>(Serializer& strm, const KeyOnly< ::std_msgs::msg::dds_::String_>& stru);

template <>
struct MarshalTraits< ::std_msgs::msg::dds_::String_> {
  static void representations_allowed_by_type(DDS::DataRepresentationIdSeq& seq)
  {
    seq.length(4);
    seq[0] = DDS::XCDR_DATA_REPRESENTATION;
    seq[1] = DDS::XCDR2_DATA_REPRESENTATION;
    seq[2] = DDS::XML_DATA_REPRESENTATION;
    seq[3] = OpenDDS::DCPS::UNALIGNED_CDR_DATA_REPRESENTATION;
  }

  static SerializedSizeBound serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound();
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound();
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static SerializedSizeBound key_only_serialized_size_bound(const Encoding& encoding)
  {
    switch (encoding.kind()) {
    case Encoding::KIND_UNALIGNED_CDR:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR1:
      return SerializedSizeBound(0);
    case Encoding::KIND_XCDR2:
      return SerializedSizeBound(0);
    default:
      OPENDDS_ASSERT(false);
      return SerializedSizeBound();
    }
  }

  static bool to_message_block(ACE_Message_Block&, const  ::std_msgs::msg::dds_::String_&) { return false; }
  static bool from_message_block( ::std_msgs::msg::dds_::String_&, const ACE_Message_Block&) { return false; }
  static Extensibility extensibility() { return FINAL; }
  static Extensibility max_extensibility_level() { return FINAL; }
};
} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace std_msgs {
namespace msg {
namespace dds_ {
/// This structure supports use of std::map with one or more keys.
struct  String__OpenDDS_KeyLessThan {
  bool operator()(const  ::std_msgs::msg::dds_::String_&, const  ::std_msgs::msg::dds_::String_&) const
  {
    // With no keys, return false to allow use of
    // map with just one entry
    return false;
  }
};
}
}
}


namespace std_msgs {
namespace msg {
namespace dds_ {
class String_TypeSupportImpl;
}
}
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace DCPS {
template <>
struct DDSTraits< ::std_msgs::msg::dds_::String_> {
  typedef  ::std_msgs::msg::dds_::String_ MessageType;
  typedef  ::std_msgs::msg::dds_::String_Seq MessageSequenceType;
  typedef  ::std_msgs::msg::dds_::String_TypeSupport TypeSupportType;
  typedef  ::std_msgs::msg::dds_::String_TypeSupportImpl TypeSupportImplType;
  typedef  ::std_msgs::msg::dds_::String_DataWriter DataWriterType;
  typedef  ::std_msgs::msg::dds_::String_DataReader DataReaderType;
  typedef  ::std_msgs::msg::dds_::String__OpenDDS_KeyLessThan LessThanType;
  typedef OpenDDS::DCPS::KeyOnly<const  ::std_msgs::msg::dds_::String_> KeyOnlyType;

  static const char* type_name() { return "std_msgs::msg::dds_::String_"; }
  static bool gen_has_key() { return false; }
  static size_t key_count() { return 0; }
};
} // namespace DCPS
} // namespace OpenDDS
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace std_msgs {
namespace msg {
namespace dds_ {
class  String_TypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<String_TypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<String_> TraitsType;
  typedef OpenDDS::DCPS::MarshalTraits<String_> MarshalTraitsType;
  typedef String_TypeSupport TypeSupportType;
  typedef String_TypeSupport::_var_type _var_type;
  typedef String_TypeSupport::_ptr_type _ptr_type;

  String_TypeSupportImpl() {}
  virtual ~String_TypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;

  void representations_allowed_by_type(::DDS::DataRepresentationIdSeq& seq);

  virtual const OpenDDS::XTypes::TypeIdentifier& getMinimalTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getMinimalTypeMap() const;

  virtual const OpenDDS::XTypes::TypeIdentifier& getCompleteTypeIdentifier() const;
  virtual const OpenDDS::XTypes::TypeMap& getCompleteTypeMap() const;

  virtual OpenDDS::DCPS::Extensibility getExtensibility() const;

  static String_TypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct< ::std_msgs::msg::dds_::String_>();
bool gen_skip_over(Serializer& ser,  ::std_msgs::msg::dds_::String_*);

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: String_ */

/* End MODULE: dds_ */

/* End MODULE: msg */

/* End MODULE: std_msgs */
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

} }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif /* OPENDDS_IDL_GENERATED_STRINGTYPESUPPORTIMPL_H_CELRIJ */
